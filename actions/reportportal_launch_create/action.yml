---
name: create reportportal launch
description: create neuralmagic reportportal launch and return its ID

inputs:
  cred_username:
    description: credential username for accessing droute
    required: true
  cred_password:
    description: credential password for accessing droute
    required: true
  run_name:
    description: run name
    required: false

outputs:
  id:
    description: reportportal launch id
    value: ${{ steps.reportportal_create_launch_id.outputs.launch_id }}

runs:
  using: composite
  steps:
    - name: install droute CLI tool
      uses: neuralmagic/nm-actions/actions/install-droute@testmo-to-reportportal

    - name: create launch
      id: reportportal_create_launch_id
      run: |
        echo "creating reportportal launch ..."
        ## CHECK reportportal_url and token
        if [[ -z "${DROUTE_USERNAME}" ]]; then
          echo "The DROUTE_USERNAME is not defined for this repository"
          exit 1
        fi
        if [[ -z "${DROUTE_PASSWORD}" ]]; then
          echo "The DROUTE_PASSWORD secret is not defined for this repository"
          exit 1
        fi
        ## construct name
        REPORTPORTAL_RUN_NAME="${{ inputs.run_name }}"
        if [[ -z "${{ inputs.run_name }}" ]]; then
            BRANCH_NAME=${GITHUB_REF_NAME}
            TMP=${ACTOR}-${BRANCH_NAME}
            REPORTPORTAL_RUN_NAME=$(echo ${TMP} | awk '{print tolower($0)}')
        fi
        echo "test run name: ${REPORTPORTAL_RUN_NAME}"
        starttime=$(date -Iseconds)

        ## construct launch request
        # TODO: what is the content of datarouter.json
        # TODO: Is the following the correct request to datarouter?
        droute send --metadata datarouter.json --username ${DROUTE_USERNAME} --password ${DROUTE_PASSWORD} --url ${DROUTE_URL} --verbose
        # TODO: capture output and verify success
        # TODO: collect the launch id from the response

        echo "launch_id=${LAUNCH_ID}" >> "${GITHUB_OUTPUT}"
      env:
        DROUTE_USERNAME: ${{ inputs.cred_username }}
        DROUTE_PASSWORD: ${{ inputs.cred_password }}
      shell: bash
