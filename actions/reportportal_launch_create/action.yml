---
name: create reportportal launch
description: create neuralmagic reportportal launch and return its ID

inputs:
  reportportal_url:
    description: reportportal URL
    required: true
  reportportal_token:
    description: reportportal token
    required: true
  source:
    description: source for reportportal, e.g. 'build-test'
    required: true
  project_id:
    description: reportportal project id
    required: true
  run_name:
    description: run name
    required: false

outputs:
  id:
    description: reportportal launch id
    value: ${{ steps.reportportal_create_launch_id.outputs.launch_id }}

runs:
  using: composite
  steps:
    - name: create launch
      id: reportportal_create_launch_id
      run: |
        echo "creating reportportal launch ..."
        ## CHECK reportportal_url and token
        if [[ -z "${REPORTPORTAL_URL}" ]]; then
          echo "The REPORTPORTAL_URL secret is not defined for this repository"
          exit 1
        fi
        if [[ -z "${REPORTPORTAL_TOKEN}" ]]; then
          echo "The REPORTPORTAL_TOKEN secret is not defined for this repository"
          exit 1
        fi
        ## construct name
        REPORTPORTAL_RUN_NAME="${{ inputs.run_name }}"
        if [[ -z "${{ inputs.run_name }}" ]]; then
            BRANCH_NAME=${GITHUB_REF_NAME}
            TMP=${ACTOR}-${BRANCH_NAME}
            REPORTPORTAL_RUN_NAME=$(echo ${TMP} | awk '{print tolower($0)}')
        fi
        echo "test run name: ${REPORTPORTAL_RUN_NAME}"
        starttime=$(date -Iseconds)

        ## construct launch request
        LAUNCH_ID = $(curl -L -X POST "${REPORTPORTAL_URL}/api/v1/plugin/${PROJECT_ID}/junit/import" \
        -H "Content-Type: multipart/form-data" \
        -H "Authorization: Bearer ${REPORTPORTAL_TOKEN}" \
        -F 'file=@"file_path.zip";type=application/x-zip-compressed' \
        -F 'launchImportRq="{
          \"attributes\": [
            {
              \"key\": \"skippedIsNotIssue\",
              \"system\": true,
              \"value\": \"true\"
            }
          ],
          \"description\": \"vllm tests\",
          \"mode\": \"DEFAULT\",
          \"name\": \"${REPORTPORTAL_RUN_NAME}\",
          \"startTime\": \"${starttime}\"
        }";type=application/json' | jq -r .id)

        echo "launch_id=${LAUNCH_ID}" >> "${GITHUB_OUTPUT}"
      env:
        REPORTPORTAL_URL: ${{ inputs.reportportal_url }}
        REPORTPORTAL_TOKEN: ${{ inputs.reportportal_token }}
        PROJECT_ID: ${{ inputs.project_id }}
      shell: bash
