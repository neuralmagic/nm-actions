---
name: submit reportportal execution results
description: submit JUnitXML formatted test execution results to ReportPortal

inputs:
  droute_username:
    description: username for accessing droute
    required: true
  droute_password:
    description: password for accessing droute
    required: true
  droute_url:
    description: droute url
    required: true
  metadata_filepath:
    description: |
      path to the metadata json file; it contains following info:
      {
         "hostname": <reportportal_host>,
         "project": <project>,
         "name": <run_name>,
         "description": <GHA run url>
         "attributes": [
              {"key": "wheel", "value": <wheel name>},
              {"key": "wf_category", "value": <workflow category>},
              ...
         ]
      }
    required: true

outputs:
  launch_url:
    description: ReportPortal URL to launch for test results
    value: ${{ steps.reportportal_submit_results_xml.outputs.launch_url }}

runs:
  using: composite
  steps:

    - name: Setup yq
      uses: dcarbone/install-yq-action@v1

    - name: upload results to reportportal
      id: reportportal_submit_results_xml
      run: |
        ## CHECK droute credentials
        if [[ -z "$DROUTE_USERNAME" ]]; then
          echo "The DROUTE_USERNAME is not defined for this repository"
          exit 1
        fi

        if [[ -z "$DROUTE_PASSWORD" ]]; then
          echo "The DROUTE_PASSWORD secret is not defined for this repository"
          exit 1
        fi

        if [[ ! -f ${{ inputs.metadata_filepath }} ]]; then
          echo "Cannot find metadata info file: ${{ inputs.metadata_filepath }}"
          exit 1
        fi

        # assuming gcp assets already downloaded
        # verify results folder contains XML result files
        TEST_RESULTS=`find . -type d -name test-results`
        if [ ! -d $TEST_RESULTS ] || [ $(ls $TEST_RESULTS/*.xml | wc -l) -eq 0 ]; then
          echo "Test result folder doesn't exist or no xml files found under $TEST_RESULTS"
          exit 1
        fi
        echo "found results folder: $TEST_RESULTS"
        ls $TEST_RESULTS

        # generate report metadata file
        TEMPLATE=`find $GITHUB_ACTION_PATH -type f -name 'droute_send_template.json'`
        if [ -z "$TEMPLATE" ]; then
          echo "droute_send_template.json not found in $GITHUB_ACTION_PATH"
          exit 1
        fi

        echo "Generating datarouter.json based on template $TEMPLATE"
        jq --raw-output \
           --slurpfile metadata ${{ inputs.metadata_filepath }} \
           '.targets.reportportal.config.hostname = $metadata[0].hostname |
            .targets.reportportal.config.project = $metadata[0].project |
            .targets.reportportal.processing.launch.name = $metadata[0].name |
            .targets.reportportal.processing.launch.description = $metadata[0].description |
            .targets.reportportal.processing.launch.attributes = $metadata[0].attributes' \
           $TEMPLATE > datarouter.json
        cat datarouter.json

        # capture output and verify success
        echo "Submitting test run to ReportPortal..."
        SUCCESS=0
        DROUTE_OUT=$(droute send --metadata datarouter.json \
                                 --results "$TEST_RESULTS/*.xml" \
                                 --username "$DROUTE_USERNAME" \
                                 --password "$DROUTE_PASSWORD" \
                                 --url "$DROUTE_URL" \
                                 --verbose \
                                 --wait=20)
        echo "response to 'droute send' command..."
        echo "$DROUTE_OUT"
        LAUNCH_URL=$(echo "$DROUTE_OUT" | yq eval -o=json '.' - | jq -r 'select(.status == "OK") | .targets[] | select(.name == "reportportal") | select(.status == "OK") | .events[] | select(.component == "reportportal-connector") | .message | fromjson | .[0].launch_url') || SUCCESS="$?"

        echo "launch_url=$LAUNCH_URL"  | tee -a $GITHUB_OUTPUT
        echo "status=$SUCCESS"  | tee -a $GITHUB_OUTPUT
        exit "$SUCCESS"
      env:
        DROUTE_USERNAME: ${{ inputs.droute_username }}
        DROUTE_PASSWORD: ${{ inputs.droute_password }}
        DROUTE_URL: ${{ inputs.droute_url }}
      shell: bash
