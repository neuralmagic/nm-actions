---
name: submit reportportal execution results
description: submit JUnitXML formatted test execution results to ReportPortal

# assumes DROUTE_USERNAME, DROUTE_PASSWORD are available SECRETS
# and DROUTE_URL is defined in nm-set-env/action.yml

inputs:
  cred_username:
    description: credential username for accessing droute
    required: true
  cred_password:
    description: credential password for accessing droute
    required: true
  droute_url:
    description: URL to access data router hub
    required: true
  run_name:
    description: Name to assign to the generated launch
    required: false
  run_url:
    description: URL to GitHub run that generated results
    required: true
  project:
    description: reportPortal project; vllm, llm-compressor, compressed-tensors
    required: true
  version:
    description: version of the product under test
    required: true

outputs:
  launch_url:
    description: ReportPortal URL to launch for test results
    value: ${{ steps.reportportal_submit_results_xml.outputs.launch_url }}

runs:
  using: composite
  steps:
    - name: install droute CLI tool
      uses: neuralmagic/nm-actions/actions/install-droute@testmo-to-reportportal

    - name: upload results to reportportal
      id: reportportal_submit_results_xml
      run: |
        echo "submitting test run to ReportPortal..."
        ## CHECK droute credentials
        if [[ -z "$DROUTE_USERNAME" ]]; then
          echo "The DROUTE_USERNAME is not defined for this repository"
          exit 1
        fi

        if [[ -z "$DROUTE_PASSWORD" ]]; then
          echo "The DROUTE_PASSWORD secret is not defined for this repository"
          exit 1
        fi

        ## construct name
        REPORTPORTAL_RUN_NAME="${{ inputs.run_name }}"
        if [[ -z "${{ inputs.run_name }}" ]]; then
            BRANCH_NAME="$GITHUB_REF_NAME"
            TMP="$ACTOR-$BRANCH_NAME"
            REPORTPORTAL_RUN_NAME=$(echo $TMP | awk '{print tolower($0)}')
        fi
        echo "test run name: $REPORTPORTAL_RUN_NAME"

        # pull JUnitXML result files from gcp bucket
        gcloud storage cp "${{ secrets.GCP_BUILD_ASSETS }}/${{ inputs.run_id }}/test-results" .

        # verify results folder contains XML result files
        readarray -d '' RESULTS < <(find "test-results" -type f -name "*.xml" -print0)
        if [[ ${#RESULTS[@]} == 0 ]]; then
          echo "Results folder 'test-results' does not contain any XML result files:"
          ls -A "test-results"
          echo "::warning title=$GITHUB_JOB - MISSING RESULT FILES::Results folder did not contain any XML result files"
          exit 1
        fi

        # compose our metadata file
        jq -n '{
          "targets": {
            "reportportal": {
              "disabled": false,
              "config": {
                "hostname": "reportportal-vllm-inference.apps.dno.ocp-hub.prod.psi.redhat.com",
                "project": "${{ inputs.project }}"
              },
              "processing": {
                "apply_tfa": true,
                "merge_launches": true,
                "simple_xml": false,
                "auto_dashboard": false,
                "launch_with_class_name": true,
                "property_filter": [".*"],
                "debug": true,
                "launch": {
                  "name": "${{ inputs.run_name }}",
                  "description": "GitHub run url: ${{ inputs.run_url}}",
                  "attributes": [
                    {"key": "Product Version", "value": "${{ inputs.version }}"},
                  ]
                }
              }
            }
          }
        }' > datarouter.json

        # capture output and verify success
        SUCCESS=0
        LAUNCH_URL = $(droute send --metadata datarouter.json \
                                   --results 'test-results/*.xml' \
                                   --username "$DROUTE_USERNAME" \
                                   --password "$DROUTE_PASSWORD" \
                                   --url "$DROUTE_URL" \
                                   --verbose \
                                   --wait | yq -r '.targets[] | select(.name == "reportportal") | .events[] | select(.component == "reportportal-connector") | .message' | jq -r '.[0]."launch_url"')
        echo "launch_url=$LAUNCH_URL" >> "$GITHUB_OUTPUT"

        -- step-status.sh "$STEP_STATUS" || SUCCESS="$?"
        echo "status=$SUCCESS" >> "$GITHUB_OUTPUT"
        exit "$SUCCESS"
      env:
        DROUTE_USERNAME: ${{ inputs.cred_username }}
        DROUTE_PASSWORD: ${{ inputs.cred_password }}
        DROUTE_URL: ${{ inputs.droute_url }}
      shell: bash
